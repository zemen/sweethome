snippet "namespace {" "unnamed namespace" rbiA
namespace {$0
}  // unnamed namespace
endsnippet

snippet "namespace (\w+) {" "namespace" rbiA
namespace `!p snip.rv = match.group(1)` {$0
}  // namespace `!p snip.rv = match.group(1)`
endsnippet

snippet "(struct|class) (\w+) {" "struct/class" rbiA
`!p snip.rv = match.group(1)` `!p snip.rv = match.group(2)` {$0
};
endsnippet

snippet "\) (.*){" "bracket completion" riA
) `!p snip.rv = match.group(1)`{$0
}
endsnippet

snippet forn "for int loop"
for (int ${1:i} = 0; $1 < ${2:n}; ++$1) {
	$3
}$0
endsnippet

snippet sz "int size()" i
(int) $1.size()$0
endsnippet

snippet all "begin() and end()" i
$1.begin(), $1.end()$0
endsnippet

snippet ios "fast cin"
ios::sync_with_stdio(false);
cin.tie(0);
$0
endsnippet

snippet templ "template"
#include <bits/stdc++.h>
#define len(x) ((int) (x).size())
using namespace std;
using ll = long long;
using ld = long double;

signed main() {
#ifdef LOCAL
	assert(freopen("${1:test}.in", "r", stdin));
#endif
	$0
}
endsnippet

snippet modular "modular arithmetics"
const int mod = 1e9 + 7;
template<typename T>
T add(T x) {
	return x;
}
template<typename T, typename... Ts>
T add(T x, Ts... y) {
	T res = x + add(y...);
	if (res >= mod)
		res -= mod;
	return res;
}
template<typename T, typename... Ts>
T sub(T x, Ts... y) {
	return add(x, mod - add(y...));
}
template<typename T, typename... Ts>
void udd(T &x, Ts... y) {
	x = add(x, y...);
}
template<typename T>
T mul(T x) {
	return x;
}
template<typename T, typename... Ts>
T mul(T x, Ts... y) {
	return (x * 1ll * mul(y...)) % mod;
}
template<typename T, typename... Ts>
void uul(T &x, Ts... y) {
	x = mul(x, y...);
}
int bin(int a, ll deg) {
	int r = 1;
	while (deg) {
		if (deg & 1)
			uul(r, a);
		deg >>= 1;
		uul(a, a);
	}
	return r;
}
int inv(int x) {
	assert(x);
	return bin(x, mod - 2);
}
$0
endsnippet

snippet dsu "DSU"
struct DSU {
	vector<int> col, rk;

	DSU(int n): col(n), rk(n) {
		iota(col.begin(), col.end(), 0);
	}

	int get(int u) {
		if (u == col[u]) {
			return u;
		}
		return col[u] = get(col[u]);
	}

	bool join(int u, int v) {
		u = get(u), v = get(v);
		if (u == v) {
			return false;
		}
		if (rk[u] > rk[v]) {
			swap(u, v);
		}
		if (rk[u] == rk[v]) {
			++rk[v];
		}
		col[u] = v;
		return true;
	}
};
$0
endsnippet
