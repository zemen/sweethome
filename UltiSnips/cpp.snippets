snippet forn "forn loop"
for (int ${1:i} = 0; $1 < ${2:n}; ++$1) {
	$3
}
$0
endsnippet

snippet sz "int size()" i
int($1.size())$0
endsnippet

snippet all "begin() end()" i
$1.begin(), $1.end()$0
endsnippet

snippet if "if"
if ($1) {
	$2
}
$0
endsnippet

snippet for "for"
for (${1:int i = 0}; ${2:i < n}; ${3:++i}) {
	$4
}
$0
endsnippet

snippet struct "struct"
struct $1 {
	$0
};
endsnippet

snippet pii "pair<int, int>" i
pair<int, int>
endsnippet

snippet templ "template"
#include <bits/stdc++.h>
using namespace std;
using ll = long long;
using ld = long double;

signed main() {
#ifdef LOCAL
	assert(freopen(".in", "r", stdin));
#endif
	$0
}
endsnippet

snippet namespace "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`} {
$0
}${1/.+/ \/\/ namespace /m}$1
endsnippet

snippet namespace_unnamed "unnamed namespace"
namespace {
$0
}  // namespace
endsnippet

snippet modular "modular arithmetics"
const int mod = 1e9 + 7;
template<typename T>
T add(T x) {
	return x;
}
template<typename T, typename... Ts>
T add(T x, Ts... y) {
	T res = x + add(y...);
	if (res >= mod)
		res -= mod;
	return res;
}
template<typename T, typename... Ts>
T sub(T x, Ts... y) {
	return add(x, mod - add(y...));
}
template<typename T, typename... Ts>
void udd(T &x, Ts... y) {
	x = add(x, y...);
}
template<typename T>
T mul(T x) {
	return x;
}
template<typename T, typename... Ts>
T mul(T x, Ts... y) {
	return (x * 1ll * mul(y...)) % mod;
}
template<typename T, typename... Ts>
void uul(T &x, Ts... y) {
	x = mul(x, y...);
}
int bin(int a, ll deg) {
	int r = 1;
	while (deg) {
		if (deg & 1)
			uul(r, a);
		deg >>= 1;
		uul(a, a);
	}
	return r;
}
int inv(int x) {
	assert(x);
	return bin(x, mod - 2);
}
$0
endsnippet
